#######################################################################
# Guidelines
#######################################################################
# Two placebo tests are built into the code with directions on how to
# implement them. One on the iterative removal of specific control
# states and one on time placebos. Search for the terms "iterative
# removal" and "time placebo".
#######################################################################
# Preparation
#######################################################################
#Clean director
#######################################################################
rm(list=ls())
# Install packages
#######################################################################
install.packages(c(
"Synth",
"xlsx",
"tidyverse",
"data.table"))
# Load packages
#######################################################################
library("Synth")
library("xlsx")
library("tidyverse")
library("data.table")
library("xlsx")
# Import data
#######################################################################
data("basque")
#write.xlsx(basque, "/Users/manuelheller/Documents/Projects/Synth Basque/Raw Data/basque.xlsx")
# Explore data
#######################################################################
basque[85:89, 1:4]
# Create country mapping
#######################################################################
state_mapping <- data.frame(basque$regionno,basque$regionname)
state_mapping <- distinct(state_mapping)
# Prepare data
#######################################################################
x <- c(2:18) ##iterative removal of selected controls: change to
## c(2:9, 11:18) to remove Cataluna from control pool and
## change to c(2:13, 15:18) to remove Madrid.
for (i in c(2:18)){ ##time placebo and ##iterative removal of selected
##controls: change to c(17)
dataprep.out <- dataprep(
foo = basque,
predictors = c("school.illit", "school.prim", "school.med",
"school.high", "school.post.high", "invest"),
predictors.op = "mean",
time.predictors.prior = 1964:1969, ##time placebo: change to 1964
special.predictors = list(
list("gdpcap", 1960:1969 , "mean"), ##time placebo: change to 1960:1964
list("sec.agriculture", seq(1961, 1969, 2), "mean"), ##time placebo: change to seq(1961, 1963, 2)
list("sec.energy", seq(1961, 1969, 2), "mean"), ##time placebo: change to seq(1961, 1963, 2)
list("sec.industry", seq(1961, 1969, 2), "mean"), ##time placebo: change to seq(1961, 1963, 2)
list("sec.construction", seq(1961, 1969, 2), "mean"), ##time placebo: change to seq(1961, 1963, 2)
list("sec.services.venta", seq(1961, 1969, 2), "mean"), ##time placebo: change to seq(1961, 1963, 2)
list("sec.services.nonventa", seq(1961, 1969, 2), "mean"), ##time placebo: change to seq(1961, 1963, 2)
list("popdens", 1969, "mean")), ##time placebo: remove this line
dependent = "gdpcap",
unit.variable = "regionno",
unit.names.variable = "regionname",
time.variable = "year",
treatment.identifier = i,
controls.identifier = x[!x %in% i],
time.optimize.ssr = 1960:1969, ##time placebo: change to 1960:1964
time.plot = 1955:1997)
# View data
#######################################################################
dataprep.out$X1
dataprep.out$X0
dataprep.out$Z0
dataprep.out$Z1
# Consolidate school.high and school.post.high
#######################################################################
dataprep.out$X1["school.high",] <- dataprep.out$X1["school.high",] +
dataprep.out$X1["school.post.high",]
dataprep.out$X1 <- as.matrix(dataprep.out$X1[
-which(rownames(dataprep.out$X1) == "school.post.high"),])
dataprep.out$X0["school.high",] <- dataprep.out$X0["school.high",] +
dataprep.out$X0["school.post.high",]
dataprep.out$X0 <- dataprep.out$X0[
-which(rownames(dataprep.out$X0) == "school.post.high"),]
lowest <- which(rownames(dataprep.out$X0) == "school.illit")
highest <- which(rownames(dataprep.out$X0) == "school.high")
dataprep.out$X1[lowest:highest,] <-
(100 * dataprep.out$X1[lowest:highest,]) /
sum(dataprep.out$X1[lowest:highest,])
dataprep.out$X0[lowest:highest,] <-
100 * scale(dataprep.out$X0[lowest:highest,], center = FALSE,
scale = colSums(dataprep.out$X0[lowest:highest,]))
rm(highest, lowest)
#######################################################################
# Synthetic control analysis
#######################################################################
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS")
synth.tables <- synth.tab(dataprep.res = dataprep.out,
synth.res = synth.out)
#######################################################################
# Generate results
#######################################################################
# Extract control and treatment from dataprep list
#######################################################################
control <- dataprep.out$Y0plot %*% synth.out$solution.w
treatment <- dataprep.out$Y1plot
gap <- treatment - control
weights <- synth.tables$tab.w
drops <- c("unit.numbers")
weights <- weights[!(names(weights) %in% drops)]
rm(drops)
# Change row names of weights
#######################################################################
# Convert row names into a column
#setDT(weights, keep.rownames = "basque.regionno")[]
#Change character type of variables
#weights$basque.regionno <- as.numeric(weights$basque.regionno)
#Merge state name with regionno
#weights <- merge(weights, state_mapping,  by="basque.regionno")
#weights$basque.regionname <- as.character(weights$basque.regionname)
#Drop unnecessary columns
#weights$basque.regionno <- NULL
#extract state names
#state_name <- data.frame(weights$basque.regionname)
#state_name$weights.basque.regionname <- as.character(state_name$weights.basque.regionname)
#assign state name as row name
#rownames(weights) <- state_name[,1]
# Combine results in dataframe
#######################################################################
results <- data.frame(control, treatment, gap)
# Change names
#######################################################################
name <- paste("control_", i, sep="")
names(results)[names(results) == 'w.weight'] <- name
rm(name)
name1 <- paste("X",i, sep="")
name2 <- paste("treatment_", i, sep="")
names(results)[names(results) == name1] <- name2
rm(name1, name2)
name1 <- paste("X",i, ".1", sep="")
name2 <- paste("gap_", i, sep="")
names(results)[names(results) == name1] <- name2
rm(name1, name2)
name <- paste("weights_",i, sep="")
names(weights)[names(weights) == 'w.weights'] <- name
rm(name)
name <- paste("results_", i, sep= "")
assign(name, results)
rm(name)
name <- paste("weights_", i, sep= "")
assign(name, weights)
rm(name)
# Remove items no longer needed
#######################################################################
rm(dataprep.out, synth.out, gap, control, treatment, results, weights)
}
#######################################################################
# Remove variables used for loop
#######################################################################
rm(i, x)
#######################################################################
# Clean up results and weights
#######################################################################
## time placebo and ##iterative removal of controls: only keep unit 17
results_all <- data.frame(results_2, results_3, results_4, results_5,
results_6, results_7, results_8, results_9,
results_10, results_11, results_12, results_13,
results_14, results_15, results_16, results_17,
results_18)
rm(results_2, results_3, results_4, results_5,
results_6, results_7, results_8, results_9,
results_10, results_11, results_12, results_13,
results_14, results_15, results_16, results_17,
results_18)
weights_all <- Reduce(function(dtf1,dtf2) merge(dtf1, dtf2, by="unit.names", all=TRUE),
list(weights_2, weights_3, weights_4, weights_5,
weights_6, weights_7, weights_8, weights_9,
weights_10, weights_11, weights_12, weights_13,
weights_14, weights_15, weights_16, weights_17,
weights_18))
rm(weights_2, weights_3, weights_4, weights_5,
weights_6, weights_7, weights_8, weights_9,
weights_10, weights_11, weights_12, weights_13,
weights_14, weights_15, weights_16, weights_17,
weights_18)
# Convert row names into a column
#######################################################################
setDT(results_all, keep.rownames = "year")[]
#Reshape data
#######################################################################
results_all <- melt(results_all, id.vars = c('year'))
weights_all <- melt(weights_all, id.vars = c('unit.names'))
#Change character type of variables
#######################################################################
results_all$year <- as.numeric(results_all$year)
results_all$variable <- as.character(results_all$variable)
#Add column with basque.regionno
#######################################################################
results_all <- results_all %>%
separate(variable, c("type", "basque.regionno"), "_")
results_all$basque.regionno <- as.numeric(results_all$basque.regionno)
weights_all <- weights_all %>%
separate(variable, c("temp", "basque.regionno"), "_")
weights_all$basque.regionno <- as.numeric(weights_all$basque.regionno)
#Merge state name with regionno
#######################################################################
results_all <- merge(state_mapping, results_all,  by="basque.regionno")
results_all$basque.regionname <- as.character(results_all$basque.regionname)
weights_all <- merge(state_mapping, weights_all,  by="basque.regionno")
weights_all$basque.regionname <- as.character(weights_all$basque.regionname)
rm(state_mapping)
#Drop unnecessary columns
#######################################################################
drops <- c("basque.regionno")
results_all <- results_all[!(names(results_all) %in% drops)]
rm(drops)
drops <- c("basque.regionno", "temp")
weights_all <- weights_all[!(names(weights_all) %in% drops)]
rm(drops)
#Rename columns
#######################################################################
names(weights_all)[names(weights_all) == 'basque.regionname'] <- 'treated.unit'
names(weights_all)[names(weights_all) == 'unit.names'] <- 'control.units'
#######################################################################
# Export to excel
#######################################################################
##time placebo and ##iterative removal of controls: change file paths
#results
#######################################################################
write.xlsx2(results_all, sheetName = "synth1", col.names = TRUE, row.names = FALSE,
"/Users/manuelheller/Documents/Projects/Synth Basque/Output/results.xlsx")
#weights
#######################################################################
write.xlsx2(weights_all, sheetName = "synth2", col.names = TRUE, row.names = FALSE,
"/Users/manuelheller/Documents/Projects/Synth Basque/Output/weights.xlsx")
# End
#######################################################################
library("xlsx")
View(results_all)
